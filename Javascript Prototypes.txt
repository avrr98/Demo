1. Prototypes:
-------------- Every JavaScript object has a prototype. The prototype is also an object.

--- All JavaScript objects inherit their properties and methods from their prototype.

--- Objects created using an object literal, or with new Object(), inherit from a prototype called Object.prototype.

--- Objects created with new Date() inherit the Date.prototype.

--- The Object.prototype is on the top of the prototype chain.

--- All JavaScript objects (Date, Array, RegExp, Function, ....) inherit from the Object.prototype.

2. How to create a prototype ?
------------------------------ The standard way to create an object prototype is to use an object constructor function:

Ex:

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}

var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");

document.getElementById("demo").innerHTML =
"My father is " + myFather.age + ". My mother is " + myMother.age; 
</script>

</body>
</html>

Note: The constructor function is the prototype for Person objects.


3. How to add properties and methods to an Object ?
--------------------------------------------------- we can have the following ways for it:

a. Adding a Property to an Object:
---------------------------------- Sometimes you want to add new properties (or methods) to an existing object.

Ex:

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}

var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");

myFather.nationality = "English";

document.getElementById("demo").innerHTML =
"My father is " + myFather.nationality; 
</script>

</body>
</html>

b. Adding a Method to an Object:
-------------------------------- Sometimes you want to add new properties (or methods) to all existing objects of a given type.

Ex:

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}

var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");

myFather.name = function() {
    return this.firstName + " " + this.lastName;
};

document.getElementById("demo").innerHTML =
"My father is " + myFather.name(); 
</script>

</body>
</html>


c. Adding Properties to a Prototype:
------------------------------------ Sometimes you want to add new properties (or methods) to an object prototype.

You cannot add a new property to a prototype the same way as you add a new property to an existing object, because the prototype is not an existing object.

Note: To add a new property to a prototype, you must add it to the constructor function:

Ex:

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
    this.nationality = "English";
}

var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");

document.getElementById("demo").innerHTML =
"My father is " + myFather.nationality + ". My mother is " + myMother.nationality; 
</script>

</body>
</html>


4. How to add methods to a prototype ?
-------------------------------------- 

a. Our constructor function can also define methods:

Ex:

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
    this.name = function() {
        return this.firstName + " " + this.lastName
    };
}

var myFather = new Person("John", "Doe", 50, "blue");
document.getElementById("demo").innerHTML =
"My father is " + myFather.name(); 
</script>

</body>
</html>


b. Using the prototype Property:
-------------------------------- The JavaScript prototype property allows you to add new properties to an existing prototype:

Ex:

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}
Person.prototype.nationality = "English";

var myFather = new Person("John", "Doe", 50, "blue");
document.getElementById("demo").innerHTML =
"My father is " + myFather.nationality; 
</script>

</body>
</html>


Please note that the JavaScript prototype property also allows you to add new methods to an existing prototype:

Ex:

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}
Person.prototype.name = function() {
    return this.firstName + " " + this.lastName
};

var myFather = new Person("John", "Doe", 50, "blue");
document.getElementById("demo").innerHTML =
"My father is " + myFather.name(); 
</script>

</body>
</html>



